{
    "collab_server" : "",
    "contents" : "\nshinyServer(function(input, output) {\n  \n  revals <- reactiveValues(\n    data = hhtl_obj %>% gs_read()\n  )\n  \n  # The timevis timeline object\n  output$timeline <- renderTimevis({\n    \n    tl = revals$data %>%\n      timevis(height = 600)\n    \n    shinyjs::show(\"dropdown-div\")\n    \n    return(tl)\n    \n  })\n  \n  # Observe when an event update request is received\n  observeEvent(input$upload_event, {\n    \n    title <- input$title\n    img_link <- input$image_link\n    ev_dates <- input$event_dates\n    start_date <- ev_dates[1]\n    end_date <- ev_dates[2]\n    desc <- input$description\n    \n    time_added <- Sys.time()\n    \n    if(end_date==start_date){end_date<-NA}\n    \n    # New data in a dataframe\n    new_row <- data.frame(\n      id = revals$data[[\"id\"]] %>% max() + 1,\n      content = title,\n      start = start_date,\n      end = end_date,\n      img = img_link,\n      description = desc,\n      entry_added = time_added\n    )\n  \n    # Add row to googlesheet object\n    hhtl_obj <- hhtl_obj %>%\n      gs_add_row(new_row, ws = 1)\n    \n    # Update reactive object\n    revals$data <- hhtl_obj %>% gs_read()\n    \n    # Create update message\n    sendSweetAlert(\n      messageId = \"event_success\", title = \"Success!!\", text = glue(\"You added {title} to the timeline!\"), type = \"success\"\n    )\n    \n  })\n  \n  # Respond to a timeline click event\n  observe({\n    \n    selected_index = input$timeline_selected \n    \n    # Only do something if the event is a new TL index has been clicked on\n    if (selected_index %>% length() > 0) {\n      \n      showModal(\n        modalDialog(\n          create_card(selected_index, revals$data)\n        , title = NULL, size =\"l\", \n        footer=actionBttn(inputId = \"edit_ev\", label = \"Edit\",style = \"unite\", color = \"warning\"),\n        easyClose = TRUE, fade = TRUE\n        )\n      )\n      \n    }\n  })\n  \n  # Respond to a edit event button click\n  observeEvent( input$edit_ev, {\n    \n    selected_index = input$timeline_selected \n      \n    showModal(\n        modalDialog(\n          create_card(selected_index, revals$data, edit_mode=TRUE),\n          title = NULL, size =\"l\",\n          footer=div(\n            actionBttn(inputId=\"cancel_edits\", label = \"Cancel\",style = \"unite\", color = \"danger\"),\n            actionBttn(inputId = \"save_edits\", label = \"Save\",style = \"unite\", color = \"success\")\n            ),\n          easyClose = TRUE, fade = TRUE\n          \n        )\n      )\n      \n  })\n  \n  # The image preview in the edit event modal\n  output$img_preview <- renderUI({\n    img(src = input$new_img_url)\n  })\n  \n  \n  # Cancel an edit\n  observeEvent(input$cancel_edits ,{\n    \n    removeModal()\n    \n    selected_index = input$timeline_selected \n    \n    showModal(\n      modalDialog(\n        create_card(selected_index, revals$data)\n        , title = NULL, size =\"l\", \n        footer=actionBttn(inputId = \"edit_ev\", label = \"Edit\",style = \"unite\", color = \"warning\"),\n        easyClose = TRUE, fade = TRUE\n      )\n    )\n  })\n  \n  # Save changes from an edit\n  observeEvent(input$save_edits ,{\n    \n    selected_index = input$timeline_selected \n    \n    new_row <- data.frame(\n      id = selected_index %>% as.integer(),\n      content = input$new_title,\n      start = input$new_ev_dates[1],\n      end = input$new_ev_dates[2],\n      img = input$new_img_url,\n      description = input$new_description,\n      entry_added = Sys.time()\n    )\n    \n    # Add row to googlesheet object\n    hhtl_obj <- hhtl_obj %>%\n      gs_edit_cells(\n        input = new_row,\n        anchor = glue(\"R{selected_index%>%as.integer() + 1}C1\"),\n        col_names = FALSE\n    )\n\n    # Update reactive object\n    revals$data <- hhtl_obj %>% gs_read()\n\n    # Create update message\n    sendSweetAlert(\n      messageId = \"event_success\", title = \"Success!!\", text = glue(\"Details successfully Updated\"), type = \"success\"\n    )\n\n  })\n  \n  \n  \n})\n",
    "created" : 1506908721013.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2985976629",
    "id" : "BD49D4A2",
    "lastKnownWriteTime" : 1506913656,
    "last_content_update" : 1506913656660,
    "path" : "C:/Users/Tom Bishop/Desktop/HHTL/server.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}